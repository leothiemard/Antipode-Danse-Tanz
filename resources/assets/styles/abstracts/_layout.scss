/*------------------------------------*\
    ABSTRACTS: LAYOUT
\*------------------------------------*/


/**
 * Layouts
 * @section
 */


// --
// Breakpoint viewport sizes and media queries.
// @author Mark Otto & Jacob Thornton
// @link https://github.com/twbs/bootstrap/tree/v4-dev
// --

// Breakpoints are defined as a map of (name: minimum width), order from small to large:
//
//    (xs: 0, sm: 544px, md: 768px)
//
// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 544px, md: 768px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md))
//    md
@function breakpoint-next( $name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys( $breakpoints ) ) {
  $n: index( $breakpoint-names, $name );
  @return if( $n < length($breakpoint-names ), nth( $breakpoint-names, $n + 1 ), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 544px, md: 768px))
//    544px
@function breakpoint-min( $name, $breakpoints: $grid-breakpoints ) {
  $min: map-get( $breakpoints, $name );
  @return if( $min != 0, $min, null );
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
// The maximum value is calculated as the minimum of the next one less 0.1.
//
//    >> breakpoint-max(sm, (xs: 0, sm: 544px, md: 768px))
//    767px
@function breakpoint-max( $name, $breakpoints: $grid-breakpoints ) {
  $next: breakpoint-next( $name, $breakpoints );
  @return if( $next, breakpoint-min( $next, $breakpoints ) - 1px, null );
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up( $name, $breakpoints: $grid-breakpoints ) {
  $min: breakpoint-min( $name, $breakpoints );
  @if $min {
    @media ( min-width: $min ) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down( $name, $breakpoints: $grid-breakpoints ) {
  $max: breakpoint-max( $name, $breakpoints );
  @if $max {
    @media ( max-width: $max ) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only( $name, $breakpoints: $grid-breakpoints ) {
  @include media-breakpoint-up( $name, $breakpoints ) {
    @include media-breakpoint-down( $name, $breakpoints ) {
      @content;
    }
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between( $lower, $upper, $breakpoints: $grid-breakpoints ) {
  @include media-breakpoint-up( $lower, $breakpoints ) {
    @include media-breakpoint-down( $upper, $breakpoints ) {
      @content;
    }
  }
}


// --
// Generate semantic grid columns with these mixins.
// --

// Container maker
@mixin make-wrapper( $gutters: $grid-gutter-widths ) {
  margin-left: auto;
  margin-right: auto;

  @each $breakpoint in map-keys( $gutters ) {
    @include media-breakpoint-up( $breakpoint ) {
      $gutter: map-get( $gutters, $breakpoint );
      padding-right: ( $gutter / 2 );
      padding-left:  ( $gutter / 2 );
    }
  }
}

@mixin make-wrapper-full-vh( $gutters: $grid-gutter-widths ) {
  position: relative;
  height: 100vh;
}

// For each breakpoint, define the maximum width of the container in a media query
@mixin make-wrapper-max-widths( $max-widths: $wrapper-max-widths ) {
  @each $breakpoint, $wrapper-max-width in $max-widths {
    @include media-breakpoint-up( $breakpoint ) {
      width: $wrapper-max-width;
      max-width: 100%;
    }
  }
}

@mixin make-gutters( $gutters: $grid-gutter-widths ) {
  @each $breakpoint in map-keys( $gutters ) {
    @include media-breakpoint-up( $breakpoint ) {
      $gutter: map-get( $gutters, $breakpoint );
      padding-right: ( $gutter / 2 );
      padding-left:  ( $gutter / 2 );
    }
  }
}

@mixin make-margin( $gutters: $grid-gutter-widths ){
  @each $breakpoint in map-keys( $gutters ) {
    @include media-breakpoint-up( $breakpoint ) {
      $gutter: map-get( $gutters, $breakpoint );
      margin-right: ( $gutter / -2 );
      margin-left:  ( $gutter / -2 );
    }
  }
}

@mixin make-layout( $gutters: $grid-gutter-widths ) {
  @include clearfix();
  @include make-margin();
}

@mixin make-layout-flex( $gutters: $grid-gutter-widths ) {
  @if $enable-flex {
    display: flex;
    flex-wrap: wrap;
  }
  @include make-margin();
}

@mixin make-col-ready( $gutters: $grid-gutter-widths ) {
  position: relative;
  min-height: 1px; // Prevent collapsing
  @include make-gutters();
}

@mixin make-col( $size, $columns: $grid-columns ) {
  float: left;
  width: percentage( $size / $columns );
}

@mixin make-col-flex( $size, $columns: $grid-columns ) {
  @if $enable-flex {
    flex: 0 0 percentage( $size / $columns );
    // Add a `max-width` to ensure content within each column does not blow out
    // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
    // do not appear to require this.
    max-width: percentage( $size / $columns );
  }
}

@mixin make-col-offset( $size, $columns: $grid-columns ) {
  margin-left: percentage( $size / $columns );
}

@mixin make-col-negate-left( $size, $columns: $grid-columns ) {
  margin-left: -( percentage( $size / $columns ) );
}

@mixin make-col-negate-right( $size, $columns: $grid-columns ) {
  margin-right: -( percentage( $size / $columns ) );
}

@mixin make-col-push( $size, $columns: $grid-columns ) {
  left: if( $size > 0, percentage( $size / $columns ), auto );
}

@mixin make-col-pull( $size, $columns: $grid-columns ) {
  right: if( $size > 0, percentage( $size / $columns ), auto);
}

@mixin make-col-modifier( $type, $size, $columns ) {
  // Work around the lack of dynamic mixin @include support (https://github.com/sass/sass/issues/626)
@if $type == push {
    @include make-col-push( $size, $columns );
  } @else if $type == pull {
    @include make-col-pull( $size, $columns );
  } @else if $type == offset {
    @include make-col-offset( $size, $columns );
  } @else if $type == negate-left {
    @include make-col-negate-left( $size, $columns );
  } @else if $type == negate-right {
    @include make-col-negate-right( $size, $columns );
  }
}


// --
// Framework grid generation
// --

// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.
@mixin make-grid-columns( $columns: $grid-columns, $gutters: $grid-gutter-widths, $breakpoints: $grid-breakpoints ) {
  // Common properties for all breakpoints
  %grid-column {
    position: relative;
    // Prevent columns from collapsing when empty
    min-height: 1px;

    @include make-gutters( $gutters );
  }

  @if $enable-flex {
    %grid-column-flex {
      display: flex;
      flex-direction: column;
      width: 100%;
      @include make-gutters( $gutters );
    }
  }

  $breakpoint-counter: 0;
  @each $breakpoint in map-keys( $breakpoints ) {
    $breakpoint-counter: ( $breakpoint-counter + 1 );

    // Allow columns to stretch full width below their breakpoints
    .o-col-full\@#{$breakpoint} {
      @extend %grid-column;
    }

    @for $i from 1 through $columns {
      .o-col-#{$i}\@#{$breakpoint} {
        @extend %grid-column;
      }
    }
    @if $enable-flex {
      @for $i from 1 through $columns {
        .o-flex-#{$i}\@#{$breakpoint} {
          @extend %grid-column-flex;
        }
      }
    }

    @include media-breakpoint-up( $breakpoint ) {
      // Provide basic `.o-col@{bp}` classes for equal-width flexbox columns
      @if $enable-flex {
        .o-flex\@#{$breakpoint} {
          flex-basis: 0;
          flex-grow: 1;
          max-width: 100%;
        }

        .o-flex-auto\@#{$breakpoint} {
          flex: 0 0 auto;
          width: auto;
        }
        @for $i from 1 through $columns {
          .o-flex-#{$i}\@#{$breakpoint} {
            @include make-col-flex( $i, $columns );
          }
        }
      }

      @for $i from 1 through $columns {
        .o-col-#{$i}\@#{$breakpoint} {
          @include make-col( $i, $columns );
        }
      }

      @each $modifier in ( pull, push, negate-left, negate-right ) {
        @for $i from 0 through $columns {
          .o-col--#{$modifier}-#{$i}\@#{$breakpoint} {
            @include make-col-modifier( $modifier, $i, $columns )
          }
        }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ( $columns - 1 ) {
        @if $breakpoint-counter != 1 or $i != 0 { // Avoid emitting useless .o-col--offset@xs-0
          .o-col--offset-#{$i}\@#{$breakpoint} {
            @include make-col-modifier( offset, $i, $columns )
          }
        }
      }
    }
  }
}


// --
// Pulls
// --

@mixin pull-left {
  float: left !important;
}
@mixin pull-right {
  float: right !important;
}